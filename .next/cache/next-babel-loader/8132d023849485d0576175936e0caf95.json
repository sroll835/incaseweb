{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport Store from '../store/configureStore';\nimport { Provider } from 'react-redux';\nimport App from \"next/app\";\n\nclass IncaseWeb extends App {\n  /*static async getInitialProps({Component, ctx}) {\r\n  console.log(\"Solo entre al app una vez\")\r\n    // we can dispatch from here too\r\n    ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\r\n    {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\r\n    ]});\r\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n  \r\n    return {pageProps};\r\n  }*/\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props; //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\n\n    return __jsx(Component, pageProps);\n  }\n\n} // Only uncomment this method if you have blocking data requirements for  </PersistGate>\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default IncaseWeb;","map":{"version":3,"sources":["C:/Users/Riano/Documents/gocar/incaseweb/pages/_app.js"],"names":["Store","Provider","App","IncaseWeb","render","Component","pageProps","store","props"],"mappings":";;AACA;AACA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;;AAGA,MAAMC,SAAN,SAAwBD,GAAxB,CAA4B;AAG1B;;;;;;;;;;AAUEE,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA;AAAvB,QAAgC,KAAKC,KAA3C,CADK,CAGL;;AACA,WAEQ,MAAC,SAAD,EAAeF,SAAf,CAFR;AAMH;;AAvBuB,C,CA4B1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAgBH,SAAhB","sourcesContent":["\r\n// import App from 'next/app'\r\nimport Store from '../store/configureStore'\r\nimport { Provider } from 'react-redux'\r\nimport App from \"next/app\";\r\n\r\n\r\nclass IncaseWeb extends App {\r\n\r\n   \r\n  /*static async getInitialProps({Component, ctx}) {\r\n  console.log(\"Solo entre al app una vez\")\r\n    // we can dispatch from here too\r\n    ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\r\n    {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\r\n    ]});\r\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n  \r\n    return {pageProps};\r\n}*/\r\n    render() {\r\n        const {Component, pageProps, store} = this.props;\r\n\r\n        //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\r\n        return (\r\n      \r\n                <Component {...pageProps} />\r\n         \r\n           \r\n        );\r\n    }\r\n\r\n}\r\n\r\n  \r\n  // Only uncomment this method if you have blocking data requirements for  </PersistGate>\r\n  // every single page in your application. This disables the ability to\r\n  // perform automatic static optimization, causing every page in your app to\r\n  // be server-side rendered.\r\n  //\r\n  // MyApp.getInitialProps = async (appContext) => {\r\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n  //   const appProps = await App.getInitialProps(appContext);\r\n  //\r\n  //   return { ...appProps }\r\n  // }\r\n  \r\n  export default (IncaseWeb); "]},"metadata":{},"sourceType":"module"}