{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sebastian\\\\Desktop\\\\incaseweb\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import App from 'next/app'\nimport App from \"next/app\";\nimport React from \"react\";\nimport { Provider } from 'react-redux';\nimport store from '../store/ConfigureStore';\nimport { persistStore } from \"redux-persist\";\nimport { PersistGate } from 'redux-persist/integration/react';\n\nvar IncaseWeb = /*#__PURE__*/function (_App) {\n  _inherits(IncaseWeb, _App);\n\n  var _super = _createSuper(IncaseWeb);\n\n  function IncaseWeb() {\n    _classCallCheck(this, IncaseWeb);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IncaseWeb, [{\n    key: \"render\",\n\n    /*static async getInitialProps({Component, ctx}) {\n    console.log(\"Solo entre al app una vez\")\n      // we can dispatch from here too\n      ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\n      {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\n      ]});\n      const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    \n      return {pageProps};\n    }*/\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      var persistor = persistStore(store); //console.log(\"hello _app,js\")\n      //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\n\n      return __jsx(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 16\n        }\n      }, __jsx(PersistGate, {\n        loading: null,\n        persistor: persistor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 22\n        }\n      }, __jsx(Component, _extends({}, pageProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 18\n        }\n      }))));\n    }\n  }]);\n\n  return IncaseWeb;\n}(App); // Only uncomment this method if you have blocking data requirements for  </PersistGate>\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default IncaseWeb;","map":{"version":3,"sources":["C:/Users/Sebastian/Desktop/incaseweb/pages/_app.js"],"names":["App","React","Provider","store","persistStore","PersistGate","IncaseWeb","props","Component","pageProps","persistor"],"mappings":";;;;;;;;;;;;;AACA;AAEA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAAUC,YAAV,QAA6B,eAA7B;AACA,SAASC,WAAT,QAA4B,iCAA5B;;IACMC,S;;;;;;;;;;;;;;AAGJ;;;;;;;;;;6BAUW;AAAA,wBAC0B,KAAKC,KAD/B;AAAA,UACEC,SADF,eACEA,SADF;AAAA,UACaC,SADb,eACaA,SADb;AAEL,UAAMC,SAAS,GAAGN,YAAY,CAACD,KAAD,CAA9B,CAFK,CAGX;AACM;;AACA,aACO,MAAC,QAAD;AAAW,QAAA,KAAK,EAAEA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,MAAC,WAAD;AAAa,QAAA,OAAO,EAAE,IAAtB;AAA4B,QAAA,SAAS,EAAEO,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADI,CADN,CADP;AAUH;;;;EA5BmBT,G,GAiCtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAgBM,SAAhB","sourcesContent":["\n// import App from 'next/app'\n\nimport App from \"next/app\";\nimport React from \"react\";\nimport { Provider } from 'react-redux'\nimport store from '../store/ConfigureStore'\nimport {  persistStore} from \"redux-persist\";\nimport { PersistGate } from 'redux-persist/integration/react'\nclass IncaseWeb extends App {\n\n   \n  /*static async getInitialProps({Component, ctx}) {\n  console.log(\"Solo entre al app una vez\")\n    // we can dispatch from here too\n    ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\n    {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\n    ]});\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n  \n    return {pageProps};\n}*/\n    render() {\n        const {Component, pageProps} = this.props;\n        const persistor = persistStore(store); \n  //console.log(\"hello _app,js\")\n        //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\n        return (\n               <Provider  store={store}>\n                     <PersistGate loading={null} persistor={persistor}>\n                 <Component {...pageProps} />\n                 </PersistGate>\n               </Provider>\n               \n         \n           \n        );\n    }\n\n}\n\n  \n  // Only uncomment this method if you have blocking data requirements for  </PersistGate>\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // MyApp.getInitialProps = async (appContext) => {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  \n  export default (IncaseWeb); "]},"metadata":{},"sourceType":"module"}