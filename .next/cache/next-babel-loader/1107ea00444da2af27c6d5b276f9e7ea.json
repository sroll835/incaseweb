{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import App from 'next/app'\nimport App from \"next/app\";\nimport React from \"react\";\n\nvar IncaseWeb = /*#__PURE__*/function (_App) {\n  _inherits(IncaseWeb, _App);\n\n  var _super = _createSuper(IncaseWeb);\n\n  function IncaseWeb() {\n    _classCallCheck(this, IncaseWeb);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IncaseWeb, [{\n    key: \"render\",\n\n    /*static async getInitialProps({Component, ctx}) {\r\n    console.log(\"Solo entre al app una vez\")\r\n      // we can dispatch from here too\r\n      ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\r\n      {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\r\n      ]});\r\n      const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n    \r\n      return {pageProps};\r\n    }*/\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          store = _this$props.store; //console.log(\"hello _app,js\")\n      //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\n\n      return __jsx(Component, pageProps);\n    }\n  }]);\n\n  return IncaseWeb;\n}(App); // Only uncomment this method if you have blocking data requirements for  </PersistGate>\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default IncaseWeb;","map":{"version":3,"sources":["C:/Users/Riano/Documents/gocar/incaseweb/pages/_app.js"],"names":["App","React","IncaseWeb","props","Component","pageProps","store"],"mappings":";;;;;;;;;;;AACA;AAEA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;;;;;;;;;;AAGJ;;;;;;;;;;6BAUW;AAAA,wBACiC,KAAKC,KADtC;AAAA,UACEC,SADF,eACEA,SADF;AAAA,UACaC,SADb,eACaA,SADb;AAAA,UACwBC,KADxB,eACwBA,KADxB,EAEX;AACM;;AACA,aAEQ,MAAC,SAAD,EAAeD,SAAf,CAFR;AAMH;;;;EAvBmBL,G,GA4BtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAgBE,SAAhB","sourcesContent":["\r\n// import App from 'next/app'\r\n\r\nimport App from \"next/app\";\r\nimport React from \"react\";\r\n\r\nclass IncaseWeb extends App {\r\n\r\n   \r\n  /*static async getInitialProps({Component, ctx}) {\r\n  console.log(\"Solo entre al app una vez\")\r\n    // we can dispatch from here too\r\n    ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\r\n    {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\r\n    ]});\r\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n  \r\n    return {pageProps};\r\n}*/\r\n    render() {\r\n        const {Component, pageProps, store} = this.props;\r\n  //console.log(\"hello _app,js\")\r\n        //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\r\n        return (\r\n      \r\n                <Component {...pageProps} />\r\n         \r\n           \r\n        );\r\n    }\r\n\r\n}\r\n\r\n  \r\n  // Only uncomment this method if you have blocking data requirements for  </PersistGate>\r\n  // every single page in your application. This disables the ability to\r\n  // perform automatic static optimization, causing every page in your app to\r\n  // be server-side rendered.\r\n  //\r\n  // MyApp.getInitialProps = async (appContext) => {\r\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n  //   const appProps = await App.getInitialProps(appContext);\r\n  //\r\n  //   return { ...appProps }\r\n  // }\r\n  \r\n  export default (IncaseWeb); "]},"metadata":{},"sourceType":"module"}