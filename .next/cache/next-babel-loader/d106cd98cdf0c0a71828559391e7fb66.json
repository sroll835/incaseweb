{"ast":null,"code":"const {\n  json,\n  send,\n  createError,\n  run\n} = require(\"micro\");\n\nconst fetch = require(\"isomorphic-unfetch\");\n\nconst login = async (req, res) => {\n  const {\n    username\n  } = await json(req);\n  const url = `http://localhost:3001/usuarios/${username}`;\n\n  try {\n    const response = await fetch(url);\n\n    if (response.ok) {\n      const {\n        id\n      } = await response.json();\n      send(res, 200, {\n        token: id\n      });\n    } else {\n      send(res, response.status, response.statusText);\n    }\n  } catch (error) {\n    throw createError(error.statusCode, error.statusText);\n  }\n};\n\nmodule.exports = (req, res) => run(req, res, login);","map":{"version":3,"sources":["C:/Users/Riano/Documents/gocar/incaseweb/api/login.js"],"names":["json","send","createError","run","require","fetch","login","req","res","username","url","response","ok","id","token","status","statusText","error","statusCode","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA;AAA3B,IAAmCC,OAAO,CAAC,OAAD,CAAhD;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AAEA,MAAME,KAAK,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAe,MAAMT,IAAI,CAACO,GAAD,CAA/B;AACA,QAAMG,GAAG,GAAI,kCAAiCD,QAAS,EAAvD;;AAEA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMN,KAAK,CAACK,GAAD,CAA5B;;AACA,QAAIC,QAAQ,CAACC,EAAb,EAAiB;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAS,MAAMF,QAAQ,CAACX,IAAT,EAArB;AACAC,MAAAA,IAAI,CAACO,GAAD,EAAM,GAAN,EAAW;AAAEM,QAAAA,KAAK,EAAED;AAAT,OAAX,CAAJ;AACD,KAHD,MAGO;AACLZ,MAAAA,IAAI,CAACO,GAAD,EAAMG,QAAQ,CAACI,MAAf,EAAuBJ,QAAQ,CAACK,UAAhC,CAAJ;AACD;AACF,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMf,WAAW,CAACe,KAAK,CAACC,UAAP,EAAmBD,KAAK,CAACD,UAAzB,CAAjB;AACD;AACF,CAfD;;AAiBAG,MAAM,CAACC,OAAP,GAAiB,CAACb,GAAD,EAAMC,GAAN,KAAcL,GAAG,CAACI,GAAD,EAAMC,GAAN,EAAWF,KAAX,CAAlC","sourcesContent":["const { json, send, createError, run } = require(\"micro\");\r\nconst fetch = require(\"isomorphic-unfetch\");\r\n\r\nconst login = async (req, res) => {\r\n  const { username } = await json(req);\r\n  const url = `http://localhost:3001/usuarios/${username}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      const { id } = await response.json();\r\n      send(res, 200, { token: id });\r\n    } else {\r\n      send(res, response.status, response.statusText);\r\n    }\r\n  } catch (error) {\r\n    throw createError(error.statusCode, error.statusText);\r\n  }\r\n};\r\n\r\nmodule.exports = (req, res) => run(req, res, login);\r\n"]},"metadata":{},"sourceType":"script"}