{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"micro\"),\n    json = _require.json,\n    send = _require.send,\n    createError = _require.createError,\n    run = _require.run;\n\nvar fetch = require(\"isomorphic-unfetch\");\n\nvar login = function login(req, res) {\n  var _await$json, username, url, response, _await$response$json, id;\n\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(json(req));\n\n        case 2:\n          _await$json = _context.sent;\n          username = _await$json.username;\n          url = \"http://localhost:3001/usuarios/\".concat(username);\n          _context.prev = 5;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 8:\n          response = _context.sent;\n\n          if (!response.ok) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 12:\n          _await$response$json = _context.sent;\n          id = _await$response$json.id;\n          send(res, 200, {\n            token: id\n          });\n          _context.next = 18;\n          break;\n\n        case 17:\n          send(res, response.status, response.statusText);\n\n        case 18:\n          _context.next = 23;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](5);\n          throw createError(_context.t0.statusCode, _context.t0.statusText);\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[5, 20]], Promise);\n};\n\nmodule.exports = function (req, res) {\n  return run(req, res, login);\n};","map":{"version":3,"sources":["C:/Users/Sebastian/Desktop/incaseweb/api/login.js"],"names":["require","json","send","createError","run","fetch","login","req","res","username","url","response","ok","id","token","status","statusText","statusCode","module","exports"],"mappings":";;eAAyCA,OAAO,CAAC,OAAD,C;IAAxCC,I,YAAAA,I;IAAMC,I,YAAAA,I;IAAMC,W,YAAAA,W;IAAaC,G,YAAAA,G;;AACjC,IAAMC,KAAK,GAAGL,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAMM,KAAK,GAAG,SAARA,KAAQ,CAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeP,IAAI,CAACM,GAAD,CADnB;;AAAA;AAAA;AACJE,UAAAA,QADI,eACJA,QADI;AAENC,UAAAA,GAFM,4CAEkCD,QAFlC;AAAA;AAAA;AAAA,2CAKaJ,KAAK,CAACK,GAAD,CALlB;;AAAA;AAKJC,UAAAA,QALI;;AAAA,eAMNA,QAAQ,CAACC,EANH;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAOaD,QAAQ,CAACV,IAAT,EAPb;;AAAA;AAAA;AAOAY,UAAAA,EAPA,wBAOAA,EAPA;AAQRX,UAAAA,IAAI,CAACM,GAAD,EAAM,GAAN,EAAW;AAAEM,YAAAA,KAAK,EAAED;AAAT,WAAX,CAAJ;AARQ;AAAA;;AAAA;AAURX,UAAAA,IAAI,CAACM,GAAD,EAAMG,QAAQ,CAACI,MAAf,EAAuBJ,QAAQ,CAACK,UAAhC,CAAJ;;AAVQ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAaJb,WAAW,CAAC,YAAMc,UAAP,EAAmB,YAAMD,UAAzB,CAbP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAiBAE,MAAM,CAACC,OAAP,GAAiB,UAACZ,GAAD,EAAMC,GAAN;AAAA,SAAcJ,GAAG,CAACG,GAAD,EAAMC,GAAN,EAAWF,KAAX,CAAjB;AAAA,CAAjB","sourcesContent":["const { json, send, createError, run } = require(\"micro\");\r\nconst fetch = require(\"isomorphic-unfetch\");\r\n\r\nconst login = async (req, res) => {\r\n  const { username } = await json(req);\r\n  const url = `http://localhost:3001/usuarios/${username}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      const { id } = await response.json();\r\n      send(res, 200, { token: id });\r\n    } else {\r\n      send(res, response.status, response.statusText);\r\n    }\r\n  } catch (error) {\r\n    throw createError(error.statusCode, error.statusText);\r\n  }\r\n};\r\n\r\nmodule.exports = (req, res) => run(req, res, login);\r\n"]},"metadata":{},"sourceType":"script"}