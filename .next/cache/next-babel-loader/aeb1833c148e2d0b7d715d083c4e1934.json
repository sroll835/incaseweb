{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _require = require(\"micro\"),\n    json = _require.json,\n    send = _require.send,\n    createError = _require.createError,\n    run = _require.run;\n\nvar fetch = require(\"isomorphic-unfetch\");\n\nvar login = function login(req, res) {\n  var _await$json, correo, _await$json2, clave, url, response, _await$response$json, id;\n\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(json(req));\n\n        case 2:\n          _await$json = _context.sent;\n          correo = _await$json.correo;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(json(req));\n\n        case 6:\n          _await$json2 = _context.sent;\n          clave = _await$json2.clave;\n          url = \"http://localhost:8080/auth/login\";\n          _context.prev = 9;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 12:\n          response = _context.sent;\n\n          if (!response.ok) {\n            _context.next = 21;\n            break;\n          }\n\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 16:\n          _await$response$json = _context.sent;\n          id = _await$response$json.id;\n          send(res, 200, {\n            access_token: id\n          });\n          _context.next = 22;\n          break;\n\n        case 21:\n          send(res, response.status, response.statusText);\n\n        case 22:\n          _context.next = 27;\n          break;\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](9);\n          throw createError(_context.t0.statusCode, _context.t0.statusText);\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[9, 24]], Promise);\n};\n\nmodule.exports = function (req, res) {\n  return run(req, res, login);\n};","map":{"version":3,"sources":["C:/Users/Riano/Documents/gocar/incaseweb/api/login.js"],"names":["require","json","send","createError","run","fetch","login","req","res","correo","clave","url","response","ok","id","access_token","status","statusText","statusCode","module","exports"],"mappings":";;eAAyCA,OAAO,CAAC,OAAD,C;IAAxCC,I,YAAAA,I;IAAMC,I,YAAAA,I;IAAMC,W,YAAAA,W;IAAaC,G,YAAAA,G;;AACjC,IAAMC,KAAK,GAAGL,OAAO,CAAC,oBAAD,CAArB;;AAEA,IAAMM,KAAK,GAAG,SAARA,KAAQ,CAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACaP,IAAI,CAACM,GAAD,CADjB;;AAAA;AAAA;AACJE,UAAAA,MADI,eACJA,MADI;AAAA;AAAA,2CAEYR,IAAI,CAACM,GAAD,CAFhB;;AAAA;AAAA;AAEJG,UAAAA,KAFI,gBAEJA,KAFI;AAGNC,UAAAA,GAHM;AAAA;AAAA;AAAA,2CAMaN,KAAK,CAACM,GAAD,CANlB;;AAAA;AAMJC,UAAAA,QANI;;AAAA,eAONA,QAAQ,CAACC,EAPH;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQaD,QAAQ,CAACX,IAAT,EARb;;AAAA;AAAA;AAQAa,UAAAA,EARA,wBAQAA,EARA;AASRZ,UAAAA,IAAI,CAACM,GAAD,EAAM,GAAN,EAAW;AAAEO,YAAAA,YAAY,EAAED;AAAhB,WAAX,CAAJ;AATQ;AAAA;;AAAA;AAWRZ,UAAAA,IAAI,CAACM,GAAD,EAAMI,QAAQ,CAACI,MAAf,EAAuBJ,QAAQ,CAACK,UAAhC,CAAJ;;AAXQ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAcJd,WAAW,CAAC,YAAMe,UAAP,EAAmB,YAAMD,UAAzB,CAdP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAkBAE,MAAM,CAACC,OAAP,GAAiB,UAACb,GAAD,EAAMC,GAAN;AAAA,SAAcJ,GAAG,CAACG,GAAD,EAAMC,GAAN,EAAWF,KAAX,CAAjB;AAAA,CAAjB","sourcesContent":["const { json, send, createError, run } = require(\"micro\");\r\nconst fetch = require(\"isomorphic-unfetch\");\r\n\r\nconst login = async (req, res) => {\r\n  const { correo } = await json(req);\r\n  const { clave } = await json(req);\r\n  const url = `http://localhost:8080/auth/login`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      const { id } = await response.json();\r\n      send(res, 200, { access_token: id });\r\n    } else {\r\n      send(res, response.status, response.statusText);\r\n    }\r\n  } catch (error) {\r\n    throw createError(error.statusCode, error.statusText);\r\n  }\r\n};\r\n\r\nmodule.exports = (req, res) => run(req, res, login);\r\n"]},"metadata":{},"sourceType":"script"}